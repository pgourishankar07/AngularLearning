* tsconfig.json - main tsconfig file -  The main, base configuration for your entire TypeScript 
project, defining general compiler options and project files.

* tsconfig.app.json - configure app compilation - Extends tsconfig.json, adding or overriding settings 
specifically for your main application's source code.

* tsconfig.spec.json - for test specification - Extends tsconfig.json, adding or overriding settings
specifically for your test files (e.g., unit tests, integration tests).
 
* angular.json is the configuration file for your Angular workspace and projects
tells the Angular CLI how to build, serve, test, and manage your Angular applications and libraries.

These files are used to configure the TypeScript compiler (tsc) and define how your 
TypeScript code should be compiled into JavaScript

_____________________________________________________Angular Essentials(Basics)_________________


Creating Components:

String Interpolation ({{ }}):
The simplest way to display data from your component's TypeScript class in its HTML template. This is immediate feedback for component creation.

Property Binding ([]):
How you pass data from a component's TypeScript class to an HTML element's property (e.g., [src], [alt], [value]). Crucial for dynamic content.

Attribute Binding (attr.):
A less common but important distinction from property binding, used for binding to actual HTML attributes that don't have corresponding DOM properties (e.g., [attr.aria-label]). Introduce this after property binding to highlight the difference.

Event Binding (()):
How you listen for events (like click, input, submit) on HTML elements and execute methods in your component's TypeScript class. This introduces interactivity.

Directives (Introduction):
Give a high-level overview. Explain that directives are classes that add extra behavior to elements. Then immediately differentiate:


Structural Directives (*ngIf, *ngFor):

Conditional Rendering (*ngIf and ng-template): Essential for showing/hiding elements based on conditions. ng-template naturally comes up here as the underlying mechanism for structural directives.
Looping (*ngFor): Iterating over collections to render lists of items.

Attribute Directives ([ngClass], [ngStyle]):
Dynamic CSS with Class Bindings ([ngClass]): How to dynamically add/remove CSS classes.
Dynamic CSS with Style Bindings ([ngStyle]): How to dynamically apply inline styles.



Component Communication & Data Flow

Binding and Passing Data to Child Components (@Input()):
Now that you know basic property binding, extend it to custom component properties. Explain how @Input() works to receive data from a parent.

Event Binding, Emitting, and Capturing (@Output(), EventEmitter):
Complementing @Input(), this covers how child components send data or notify parent components about events using @Output() and EventEmitter. This completes the parent-child communication loop.
Forms & User Input

Two-Way Data Binding ([(ngModel)]):
Introduce [(ngModel)] as a convenient way to achieve both property and event binding for form inputs, enabling automatic synchronization between the input and the component's property.

FormsModule:
Explain that [(ngModel)] requires importing FormsModule. This is a practical dependency.

ngSubmit():
How to handle form submissions in Angular, typically used on the <form> tag.
Advanced TypeScript & Component Features

name!: string vs name?: string (! vs ?):
This fits well here as you're now dealing with properties in classes and the implications of strict type checking, especially in component properties. Explain optional properties vs. definite assignment assertion.

Getter and Setter in Class Component:
Show how to use getters and setters for computed properties or to react to property changes within your component class, which can be useful for inputs or internal state.

ng-content - as a wrapper:
Explain content projection, allowing components to accept and render content passed to them from their parent. This is key for creating flexible and reusable wrapper components.

Pipes for Transforming Data:
Introduce pipes as a way to transform data for display in templates (e.g., date, currency, uppercase).
Services & Dependency Injection (Application Logic)

Service Layer Creation:
Explain the concept of services for housing reusable business logic, data fetching, or shared state, promoting separation of concerns.

Dependency Injection:
Crucial for Angular. Explain how services are provided and injected into components (and other services) to make them available where needed. This is a core Angular pattern.




Modern Angular Features (Signals Era)

Signals (input(), output(), inject()):
This is a newer, more reactive way of handling data flow in Angular, especially for component inputs and outputs, and for injecting dependencies without traditional constructors. These are cutting-edge and worth learning after the traditional methods.


Data Persistence

Local Storage:
A practical topic for simple client-side data persistence. Show how to interact with localStorage to store and retrieve data.


_____________________________________________________Angular Modules(NgModule)_________________

The @NgModule Decorator Properties:

The @NgModule decorator takes a metadata object with several properties that define the module's characteristics:

declarations:

This array lists the components, directives, and pipes that belong to this specific module.
Rule: A component, directive, or pipe can only be declared in one NgModule. If you try to declare it in multiple modules, Angular will throw an error.
These declared items are visible within this module's templates.

imports:
This array lists other NgModules whose declared components, directives, and pipes are needed by the components declared in this module.
When you import a module, you gain access to its exported declarations.
Commonly imported modules include BrowserModule, FormsModule, HttpClientModule, RouterModule, and your own feature modules.

exports:
This array lists a subset of the declarations (components, directives, pipes) that this module makes available for other modules to use.
If a component declared in ModuleA needs to be used in the template of a component declared in ModuleB, then ModuleA must export that component, and ModuleB must import ModuleA.
You can also export other NgModules that you've imported, effectively re-exporting them (e.g., a shared module might export CommonModule and FormsModule).

providers:
This array lists the services that the module makes available for injection into components, directives, pipes, and other services.
Services declared in providers are usually singleton instances within the injector scope where the module is provided.
Note: With Angular's modern standalone components and providedIn: 'root', using providers in @NgModule is becoming less common for many services, as services can be directly made available application-wide or component-specific.

bootstrap:
This property is only used in the root NgModule (usually AppModule).
It specifies the main component(s) that Angular should load and insert into the index.html file when the application starts. These are typically the application's top-level components.

_________________

AppModule is the main entry point.
It needs to display a list of tasks and potentially other things. The task-related logic is encapsulated in TaskModule.
AppModule imports TaskModule to gain access to TasksComponent (because TaskModule exports TasksComponent). So, AppModule's template can contain <app-tasks></app-tasks>.
Inside TaskModule, TasksComponent (and perhaps NewTaskComponent or TaskComponent) might want to render individual items using a common "card" UI element.
This "card" UI is provided by CardComponent, which is part of CardModule.
TaskModule imports CardModule to gain access to CardComponent (because CardModule exports CardComponent). So, components within TaskModule can contain <app-card></app-card>.
TaskModule also needs CommonModule for basic structural directives (*ngIf, *ngFor) and FormsModule for forms.
CardModule is very focused, only declaring and exporting CardComponent.

________________IMPORTANT________________

Angular Modules
Directives
Pipes for transforming
Service and dependency injection
RxJs
Http req sending
Forms handling
Routing - route guards
ngRx - state management
Testing - jasmin/karma
deploy


_____________________REVISION_______________

1.what is Angular and why to use?
2.How does angular application works?
3.What is Single page application?
4.explain the project structure of Angular
5. which file is the entry point in Angular?
6.what is components in Angular? explain the life cycle hook methods of Component?
7.How to create a component in Angular?
8.if you want to create a component with test file then which command we need to write
9.what is data binding? How to implement one-way, two-way databinding in angular?
10.what is even handling ? how to bind event in angular?

11.what is interpolaion?
12. how to implement DI feature in Angular
13.what is pipes in Angular?
14.list out important built in  pipes in Angular? Write code  to create our own custom pipe 
15.what are different phases of Angular component?
16.what is directives in Angular?
17.explain the different directives in Angular? like *ngIf, *ngFor, *ngSwitch, ngModel, ngClass, ngStyle
18.How many ways we can define the forms in angular?
19.what is template in Angular?
20.write a code to share a data from parent to child component?

21. what is ? operator in Angular?
22.what signal in Angular?
23.what do you mean by asynchronous communication?
24. what is Observable? what are the difference between Promises and Observable
25. what are different phases of Observable ?
26.what are lify cycle methods are available in create phase?
27.how to unsubscribe Observable object
28. what is proper naming convention to declare Observale type of variable
29.How to implement Redux pattern in Angular?
30.Which commands we use to install and add ngrx library?

31. what is Store? Action? Reducer? 
32. How component can select a shared state from Store
33.explain all steps to create Action, Reducer, registering store and select state with coding example
34. when we need NgRx , give a real time scenario?
35.how to integrate spring boot rest Api with Angular?
36. what are major differences between Angular 16 and Angular 19?
37.what is routing and how many ways we can implement routing in angular?
38. what is the use <router-outlet> tag?
39. what is difference between routerLink and href?

40.How to use bootstarp in Angular?
41. How to add an image or icon in angular?
42.How to implement QueryParameter in Angular router?
43. what is adavantages of Angular services?
44.what is decorator in angular? explain @Inject, @Component
45. can I create a Component without spec file? if so then How to create?
46.How to run angular app with different port number?
47.How to implement conditional rendering in angular?


______________________________________________________
Life cycle :

Component Created
↓
ngOnChanges → ngOnInit → ngDoCheck
↓
ngAfterContentInit → ngAfterContentChecked
↓
ngAfterViewInit → ngAfterViewChecked
↓
Component Updated (ngOnChanges → ngDoCheck → ngAfterContentChecked → ngAfterViewChecked)
↓
Component Destroyed (ngOnDestroy)


Creation Phase:
ngOnChanges (if input properties exist)
ngOnInit
ngDoCheck

Content Projection Phase:
ngAfterContentInit
ngAfterContentChecked

View Initialization Phase:
ngAfterViewInit
ngAfterViewChecked

Destruction Phase:
ngOnDestroy

_____________________________

String Interpolation	{{ value }}	Component → Template	One-way
Property Binding	[property]="value"	Component → Template	One-way
Attribute Binding	[attr.name]="value"	Component → Template	One-way
Class Binding	[class.name]="value"	Component → Template	One-way
Style Binding	[style.prop]="value"	Component → Template	One-way
Event Binding	(event)="handler()"	Template → Component	One-way
Two-Way Binding	[(ngModel)]="value"	Component ↔ Template	Two-way
